apiVersion: batch/v1
kind: Job
metadata:
  name: postgresql-setup
  namespace: database
spec:
  template:
    spec:
      restartPolicy: OnFailure
      containers:
        - name: postgres-setup
          image: postgres:15
          env:
            - name: PGPASSWORD
              value: "homelab_admin_password"
          command:
            - /bin/bash
            - -c
            - |
              echo "Waiting for PostgreSQL to be ready..."
              until pg_isready -h postgresql.database.svc.cluster.local -p 5432 -U postgres; do
                sleep 2
              done

              echo "Creating databases..."
              psql -h postgresql.database.svc.cluster.local -U postgres -d postgres -v ON_ERROR_STOP=1 <<EOF

              -- Create databases if they don't exist
              SELECT 'CREATE DATABASE nextcloud' WHERE NOT EXISTS (SELECT FROM pg_database WHERE datname = 'nextcloud')\gexec
              SELECT 'CREATE DATABASE gitea' WHERE NOT EXISTS (SELECT FROM pg_database WHERE datname = 'gitea')\gexec
              SELECT 'CREATE DATABASE immich' WHERE NOT EXISTS (SELECT FROM pg_database WHERE datname = 'immich')\gexec
              SELECT 'CREATE DATABASE kasm' WHERE NOT EXISTS (SELECT FROM pg_database WHERE datname = 'kasm')\gexec
              SELECT 'CREATE DATABASE vaultwarden' WHERE NOT EXISTS (SELECT FROM pg_database WHERE datname = 'vaultwarden')\gexec
              SELECT 'CREATE DATABASE jenkins' WHERE NOT EXISTS (SELECT FROM pg_database WHERE datname = 'jenkins')\gexec

              -- Create users if they don't exist
              DO \$\$
              BEGIN
                IF NOT EXISTS (SELECT FROM pg_catalog.pg_roles WHERE rolname = 'nextcloud') THEN
                  CREATE USER nextcloud WITH PASSWORD 'nextcloud_password';
                END IF;
                IF NOT EXISTS (SELECT FROM pg_catalog.pg_roles WHERE rolname = 'gitea') THEN
                  CREATE USER gitea WITH PASSWORD 'gitea_password';
                END IF;
                IF NOT EXISTS (SELECT FROM pg_catalog.pg_roles WHERE rolname = 'immich') THEN
                  CREATE USER immich WITH PASSWORD 'immich_password';
                END IF;
                IF NOT EXISTS (SELECT FROM pg_catalog.pg_roles WHERE rolname = 'kasm') THEN
                  CREATE USER kasm WITH PASSWORD 'kasm_password';
                END IF;
                IF NOT EXISTS (SELECT FROM pg_catalog.pg_roles WHERE rolname = 'vaultwarden') THEN
                  CREATE USER vaultwarden WITH PASSWORD 'vaultwarden_password';
                END IF;
                IF NOT EXISTS (SELECT FROM pg_catalog.pg_roles WHERE rolname = 'jenkins') THEN
                  CREATE USER jenkins WITH PASSWORD 'jenkins_password';
                END IF;
              END\$\$;

              -- Grant database privileges
              GRANT ALL PRIVILEGES ON DATABASE nextcloud TO nextcloud;
              GRANT ALL PRIVILEGES ON DATABASE gitea TO gitea;
              GRANT ALL PRIVILEGES ON DATABASE immich TO immich;
              GRANT ALL PRIVILEGES ON DATABASE kasm TO kasm;
              GRANT ALL PRIVILEGES ON DATABASE vaultwarden TO vaultwarden;
              GRANT ALL PRIVILEGES ON DATABASE jenkins TO jenkins;

              EOF

              echo "Setting up Immich extensions..."
              psql -h postgresql.database.svc.cluster.local -U postgres -d immich -v ON_ERROR_STOP=1 <<EOF
              CREATE EXTENSION IF NOT EXISTS cube;
              CREATE EXTENSION IF NOT EXISTS earthdistance;
              -- Note: vectors extension may need to be installed separately
              EOF

              echo "Database setup completed successfully!"
---
apiVersion: argoproj.io/v1alpha1
kind: Application
metadata:
  name: postgresql-setup
  namespace: argocd
  annotations:
    argocd.argoproj.io/sync-wave: "6" # Run after PostgreSQL deployment
spec:
  project: default
  source:
    repoURL: https://github.com/jake-molnia/homelab
    targetRevision: HEAD
    path: manifests/database
  destination:
    server: https://kubernetes.default.svc
    namespace: database
  syncPolicy:
    automated:
      prune: true
      selfHeal: true
    syncOptions:
      - CreateNamespace=false
